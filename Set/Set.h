#ifndef _Set_h_
#define _Set_h_
#include "BitField.h"
#include<iostream>

class TSet
{
private:
	int maxPower; // максимальная мощность множества
	TBitField bitField; // битовое поле для хранения хар-го вектора
public:
	TSet(int mp);
	TSet(const TSet &s); // конструктор копирования
	TSet(const TBitField &bf); // конструктор преобразования типа
	operator TBitField(); // преобразование типа к битовому полю
	// доступ к битам
	int getMaxPower(void) const; // максимальная мощность множества
	void insElem(const int n); // включить элемент в множество
	void delElem(const int n); // удалить элемент из множества
	int isMember(const int n) const; // проверить наличие элемента в множестве
	
	// теоретико-множественные операции
	int operator== (const TSet &s); // сравнение
	TSet& operator=(const TSet &s); // присваивание
	TSet operator+ (const int n); // включение элемента в множество
	TSet operator- (const int n); // удаление элемента из множества
	TSet operator+ (const TSet &s); // объединение
	TSet operator* (const TSet &s); // пересечение
	TSet operator~ (void); // дополнение
	friend std::istream &operator>>(std::istream &istr, TSet &bf);
	friend std::ostream &operator<<(std::ostream &ostr, const TSet &bf);
};

#endif